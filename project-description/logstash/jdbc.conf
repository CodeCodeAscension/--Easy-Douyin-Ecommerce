input { # 输入
  jdbc {
    jdbc_driver_library => ".config/mysql/mysql-connector-java-8.0.23.jar"  # MySQL JDBC 驱动路径
    jdbc_driver_class => "com.mysql.cj.jdbc.Driver"  # MySQL JDBC 驱动类
    jdbc_connection_string => "jdbc:mysql://localhost:3306/db_product"  # MySQL 链接
    jdbc_user => "root"  # MySQL 用户名
    jdbc_password => "root"  # MySQL 密码
    jdbc_paging_enabled => "true" # 开启分页，分批次查询
    jdbc_page_size => "1000" # 每批查询 1000 条

    # 查询 SQL 脚本路径（从数据库提取数据）
    statement_filepath => ".config/mysql/jdbc.sql"

    # 任务调度频率
    schedule => "* * * * *"  # 每分钟执行一次查询

    jdbc_default_timezone => "Asia/Shanghai" # 设置读取数据库时默认使用的时区
    use_column_value => true # 使用查询记录中的字段值，来进行增量同步
    tracking_column => "update_time" # 保存查询记录中，update_time 最大的时间戳，用于增量同步
    tracking_column_type => "timestamp" # 指定 tracking_column 字段的类型

    # 保存 JDBC 插件上次运行的状态信息，以便下次运行时可以从上次停止的地方继续处理数据
    last_run_metadata_path => ".config/mysql/last_run_time"
    clean_run => false # 是否每次运行时都清除已保存的同步状态
  }
}

filter {
  # 如果需要进一步处理数据，可以在这里添加其他过滤器

  mutate { # mutate 提供了多种功能来处理和转换字段值
    remove_field => ["@timestamp"] # 移除 @timestamp 字段
    remove_field => ["@version"] # 移除 @version 字段
  }
}

output { # 输出
  elasticsearch { # Elasticsearch 配置
    hosts => ["http://localhost:9200"] # Elasticsearch 链接
    index => "products"  # Elasticsearch 索引名称
    document_id => "%{id}"  # 使用查询结果中的 id 字段，作为文档的唯一标识
  }

  stdout {
    codec => json_lines  # 打印日志输出到控制台，便于调试
  }
}

